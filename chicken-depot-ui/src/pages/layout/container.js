import React, { Component } from 'react'
import './container.css'
import MainNavbar from './navbar/component'
import { connect } from 'react-redux'
import { replace, Fragment } from 'redux-little-router'
import ProductsList from '../products/container'
import Cart from '../cart/container'
import ProductsNew from '../products/new/container'
import Update from '../products/update/container'
import { Jumbotron } from 'reactstrap'


export class Layout extends Component {
  componentWillMount () {
    if (this.props.currentPath === '/') {
      this.props.dispatch(replace({pathname: '/products'}))
    }
  }

  render () {
    return (
      <div className="layout-container">
        <MainNavbar cartCount={this.props.cartProducts.length}/>
        <Jumbotron>
          <h1 className="display-3">Welcome to Clint's Chicken Depot!</h1>
          <p className="lead">This project was done as a final project for the bootcamp I attended at Helio Training in Salt Lake City, Ut.
          It was built using React.js, JavaScript, Graphcool(for the database) Redux and Redux little router.
          The main purpose of this project is to show the ability to make a web application using React.js with full C.R.U.D(create,read,update,delete) operation to a database.
          Feel free to play around on the site, you will see usage instructions below.</p>
          <hr className="my-2" />
          <h3>Products page</h3>
          <ul>
            <li>As you can see this is the home page of my site.</li>
            <li>The "Nav bar" has 3 links that will take you to their respective pages</li>
            <li>You will notice each product has a unique ID# generated by the Graphcool database.</li>
            <li>The "Add To Cart" button will add that product to the cart and you can see the number of items in the cart change as you add them.</li>
            <li>***WARNING*** The "Delete" button deletes the product from the database and it has to be added back in on the "New Products" page. If you want to use it please delete one of the cards at the bottom that say "Delete Me". </li>
            <li>The Update button is unique because it takes the product ID# and routes you to the "Update Product" page and auto loads the form to make the update simple. Go ahead and update any card you like, and you can change any input field to what ever you want and press the "Update Product" button, you will then be rerouted back to the "Products" page where you can see the product card has been updated with the new information.</li>
          </ul>
          <h3>New Products Page</h3>
          <ul>
            <li>The "New Products" page is a very simple form. Go ahead and fill in the input fields and then press the "Add Product" button. You should get an Alert saying "the product has been added to the Database". I chose to not reroute back to the "Products" page so that multiple items could be added as quickly and easily as possible.</li>
            <li>I also added a "Clear" button to clear all of the input fields so they don't have to be deleted individually in case of a major mistake.</li>
          </ul><h3>Cart Page</h3>
          <ul>
            <li>The "Cart" page is very basic as well, simply add products to the cart from the "Products" page. You can remove each item individually by pressing the "Remove Item" button or clear the cart using the "Clear Cart" button.</li>
          </ul>
        </Jumbotron>
        <MainNavbar cartCount={this.props.cartProducts.length}/>
        <Fragment forRoute="/">
          <div className={'routable-container'}>
            <Fragment forRoute="/products/new">
              <ProductsNew/>
            </Fragment>
            <Fragment forRoute="/products/:id/update">
              <Update/>
            </Fragment>
            <Fragment forRoute="/products">
              <ProductsList/>
            </Fragment>
            <Fragment forRoute="/cart">
              <Cart/>
            </Fragment>
          </div>
        </Fragment>
      </div>

    )
  }

}

const mapStateToProps = (state) => ({
  currentPath: state.router.pathname,
  cartProducts: state.cart.products
})

export default connect(mapStateToProps)(Layout)